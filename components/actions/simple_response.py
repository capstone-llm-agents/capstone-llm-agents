"""The agent responds to a simple prompt using an LLM."""

import logging
from typing import override

from llm_mas.action_system.core.action import Action
from llm_mas.action_system.core.action_context import ActionContext
from llm_mas.action_system.core.action_params import ActionParams
from llm_mas.action_system.core.action_result import ActionResult
from llm_mas.fragment.fragment import Fragment
from llm_mas.fragment.kinds.base import TextFragmentKind
from llm_mas.fragment.raws.base import TextRaw
from llm_mas.fragment.source import FragmentSource
from llm_mas.model_providers.api import ModelsAPI
from llm_mas.utils.config.models_config import ModelType


class SimpleResponse(Action):
    """The action that generates a simple response using an LLM."""

    def __init__(self) -> None:
        """Initialize the SimpleResponse action."""
        super().__init__(
            description="Responds to simple requests that can be answered with a simple response.",
        )

    @override
    async def do(self, params: ActionParams, context: ActionContext) -> ActionResult:
        """Perform the action by generating a response from an LLM."""
        last_message = self.get_last_message_content(context)

        if not context.last_result.is_empty():
            # override content
            last_message = f"""
            Context:
            {context.last_result.as_json_pretty()}

            Prompt:
            {last_message}
            """

        # TODO: Move to a different logger  # noqa: TD003
        logging.getLogger("textual_app").info("Calling LLM with message: %s", last_message)
        logging.getLogger("textual_app").info("Context: %s", context.last_result.as_json_pretty())

        response = await ModelsAPI.call_llm(last_message, ModelType.DEFAULT)

        res = ActionResult()
        res.set_param("response", response)

        # add frag
        res.add_fragment(
            Fragment(
                name="Simple Response",
                description="The response generated by the LLM.",
                source=FragmentSource.AGENT,
                kind=TextFragmentKind(
                    raw=TextRaw(response),
                ),
            ),
        )

        return res
